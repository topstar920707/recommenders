# Encapsulate the steps to run pytests
# You can call this action wit the following:
# 
# steps:
#   ...
#   # make sure to checkout the code before running the local action
#   - uses: actions/checkout@v2
#   - uses: ./.github/workflows/actions/run-tests
#     with:
#       tox-env: 'spark'
#       test-kind: 'unit'
#       test-marker: 'spark and notebooks'

name: 'Run Python tests'
description: 'Specify parameters to configure test subsets to run and collect test report for.'
inputs:
  tox-env:
    description: "Name of the tox env. EX) cpu|gpu|spark 
      See tox.ini at root level for more info"
    required: true
    # Options are "cpu|gpu|spark|all" and any default tox env. 
    # For more info on default tox env, see https://tox.readthedocs.io/en/latest/config.html#tox-environments
    default: 'all'
  test-kind:
    description: "The kinds of tests to run. EX) unit|integration|smoke
      This maps to those in the 'tests/<unit|integration|smoke>' folder"
    required: true
    default: 'unit'
  test-marker:
    description: "Finer filter for selecting the tests to run with pytest markers.
      See https://docs.pytest.org/en/6.2.x/example/markers.html"
    default: 'not gpu and not notebooks and not spark'
outputs:
  cov-report-filename:
    description: "Filename of the code coverage report"
    value: ${{ steps.rename-cov-report.outputs.cov-report-filename }}

runs:
  using: "composite"
  steps:
  ################# Run Python tests #################
  - name: Install build dependencies (tox)
    shell: bash
    run: |
      python -m pip install --upgrade pip setuptools wheel
      pip install numpy==1.19
      pip install tox
  
  - name: Run ${{ inputs.test-kind }} tests ('${{ inputs.test-marker }}')
    shell: bash
    # '-e py' will use the default 'python' executable found in system path
    # for why using tox, see: https://tox.readthedocs.io/en/latest/index.html
    # tox will do:
    #   1. create a virtual env
    #   2. build and install source distribution (sdist)
    #   3. run the specified tests
    #   4. show test reports
    run: |
      tox -ve ${{ inputs.tox-env }} -- tests/${{ inputs.test-kind }} -m '${{ inputs.test-marker }}'
    
  - name: Prepare Code Coverage Report
    id: rename-cov-report
    shell: bash
    run: |
        mv .coverage '.coverage_${{ inputs.test-marker }}_${{ inputs.test-kind }}_${{ github.sha }}'
        echo "Coverage report renamed to: '$(ls .coverage*)'"
        echo "::set-output name=cov-report-filename::$(echo $(ls .coverage*))"
