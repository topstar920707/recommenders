# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

parameters:
- name: test_types
  type: object
  default: {}  # can include unit, smoke, and integration
- name: task_name
  type: string
- name: timeout
  type: number
  default: 20
- name: conda_env
  type: string
- name: conda_opts
  type: string
- name: pip_opts
  type: string
- name: pytest_markers
  type: string
- name: pytest_params
  type: string
  default: ""
- name: install
  type: string
  default: ""

jobs:
- job: "${{ parameters.conda_env }}" # Job name can't have spaces
  displayName: "${{ parameters.task_name }}"
  timeoutInMinutes: ${{ parameters.timeout }}
  pool:
    name: $(Agent_Pool)

  steps:
  - script: |
      echo "##vso[task.prependpath]/data/anaconda/bin"
      echo "##vso[task.setvariable variable=ARTIFACTS_DIRECTORY]/home/vsts/work/artifacts"

      # Make sure there is no conda environment
      conda env remove -n ${{ parameters.conda_env }} || exit -1

      # Create a clean conda environment
      conda create -fyn ${{ parameters.conda_env }} ${{ parameters.conda_opts }}
      eval "$(conda shell.bash hook)"
      conda activate ${{ parameters.conda_env }}

      # install reco-utils and needed dependencies
      pip install pytest>=3.6.4 || exit -1
      if [ "${{ parameters.install }}" = "release" ]; then
        rm -rf dist
        echo "   --- BUILDING PACKAGE ---"
        pip install setuptools wheel twine || exit -1
        python setup.py sdist bdist_wheel || exit -1
        echo "   --- INSTALLING WHEEL ---"
        pip install --user dist/reco_utils*.whl || exit -1
        mkdir $ARTIFACTS_DIRECTORY || exit -1
        rm -rf $ARTIFACTS_DIRECTORY/*.whl || exit -1
        cp dist/reco_utils*.whl $ARTIFACTS_DIRECTORY || exit -1
      else
        echo "Installing latest code"
        pip install .${{ parameters.pip_opts }} || exit -1
      fi
      
      # clean up any previous test results        
      rm -rf reports
    displayName: 'Install Dependencies'
  
  - ${{ each test in parameters.test_types }}:
    - script: |
        eval "$(conda shell.bash hook)"
        conda activate ${{ parameters.conda_env }}
        export PYSPARK_PYTHON=`which python`
        export PYSPARK_DRIVER_PYTHON=`which python`
        
        if [ "${{ test }}" == "unit" ]; then
            export TEST_MARKER=""
        else
            export TEST_MARKER="${{ test }} and "
        fi

        # run tests
        pytest tests/${{ test }} \
          ${{ parameters.pytest_params }} \
          -m "${TEST_MARKER}${{ parameters.pytest_markers }}" \
          --durations 0 \
          --junitxml=reports/test-${{ test }}-${{ parameters.conda_env }}.xml || exit -1
        
        conda deactivate
      displayName: 'Run Tests'

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFiles: 'reports/test-${{ test }}*.xml'
        failTaskOnFailedTests: true
      condition: succeededOrFailed()

  - script: |
      conda env remove -n ${{ parameters.conda_env }} || exit -1
      rm -rf reports || exit -1
    displayName: 'Remove Conda Env'
    continueOnError: true
    condition: succeededOrFailed()
