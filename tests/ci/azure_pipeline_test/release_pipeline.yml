# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

# Pull request against these branches will trigger this build
pr: none

# A new tag will trigger the build
trigger:
- pipeline_release
  # tags:
  #   include:
  #   - *

variables:
- group: LinuxAgentPool

jobs:
- template: dsvm_linux_template.yml
  parameters:
    test_types:
    - unit
    task_name: "Test - Unit Linux CPU"
    conda_env: "relase_unit_linux_cpu"
    conda_opts: "python=3.6"
    pip_opts: ""
    pytest_markers: "not notebooks and not spark and not gpu"
    install: "release"

# - template: dsvm_linux_template.yml
#   parameters:
#     test_types:
#     - unit
#     task_name: "Test - Unit Notebook Linux CPU"
#     conda_env: "relase_unit_notebook_linux_cpu"
#     conda_opts: "python=3.6"
#     pip_opts: "[examples]"
#     pytest_markers: "notebooks and not spark and not gpu"

# - template: dsvm_linux_template.yml
#   parameters:
#     test_types:
#     - unit
#     task_name: "Test - Unit Linux GPU"
#     conda_env: "relase_unit_linux_gpu"
#     conda_opts: "python=3.6 cudatoolkit=10.0 \"cudnn>=7.6\""
#     pip_opts: "[gpu] -f https://download.pytorch.org/whl/cu100/torch_stable.html"
#     pytest_markers: "not notebooks and not spark and gpu"

# - template: dsvm_linux_template.yml
#   parameters:
#     test_types:
#     - unit
#     task_name: "Test - Unit Notebook Linux GPU"
#     conda_env: "relase_unit_notebook_linux_gpu"
#     conda_opts: "python=3.6 cudatoolkit=10.0 \"cudnn>=7.6\""
#     pip_opts: "[gpu,examples]  -f https://download.pytorch.org/whl/cu100/torch_stable.html"
#     pytest_markers: "notebooks and not spark and gpu"

# - template: dsvm_linux_template.yml
#   parameters:
#     test_types:
#     - unit
#     task_name: "Test - Unit Linux Spark"
#     conda_env: "relase_unit_linux_spark"
#     conda_opts: "python=3.6"
#     pip_opts: "[spark]"
#     pytest_markers: "not notebooks and spark and not gpu"

# - template: dsvm_linux_template.yml
#   parameters:
#     test_types:
#     - unit
#     task_name: "Test - Unit Notebook Linux Spark"
#     conda_env: "relase_unit_notebook_linux_spark"
#     conda_opts: "python=3.6"
#     pip_opts: "[spark,examples]"
#     pytest_markers: "notebooks and spark and not gpu"

- job: Package
  dependsOn:
  - relase_unit_linux_cpu
  # - relase_unit_notebook_linux_cpu
  # - relase_unit_linux_gpu
  # - relase_unit_notebook_linux_gpu
  # - relase_unit_linux_spark
  # - relase_unit_notebook_linux_spark
  condition: succeeded()
  steps:
    # Create archives with complete source code included
  - task: ArchiveFiles@2
    displayName: Create zip archive
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    inputs:
      rootFolderOrFile: $(Build.SourcesDirectory)
      includeRootFolder: false
      archiveType: zip
      archiveFile: '$(Build.ArtifactStagingDirectory)/archives/Recommenders-complete_source_code_zip.zip'
      replaceExistingArchive: true
  - task: ArchiveFiles@2
    displayName: Create tar.gz archive
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    inputs:
      rootFolderOrFile: $(Build.SourcesDirectory)
      includeRootFolder: false
      archiveType: tar
      tarCompression: gz
      archiveFile: '$(Build.ArtifactStagingDirectory)/archives/Recommenders-complete_source_code_tar_gz.tar.gz'
      replaceExistingArchive: true
  - script: |
      echo "   --- LIST OF ARTIFACTS ---"
      echo $BUILD_ARTIFACTSTAGINGDIRECTORY
      ls -lha $BUILD_ARTIFACTSTAGINGDIRECTORY
    displayName: 'Iist artifacts'
  - task: GitHubRelease@0
    displayName: 'Create GitHub Release'
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    inputs:
      gitHubConnection: recommenders_release
      repositoryName: '$(Build.Repository.Name)'
      action: 'create'
      target: '$(Build.SourceVersion)'
      tagSource: 'auto'
      title: '$(Build.SourceBranchName)'
      assets: |
        $(Build.SourcesDirectory)/binaries/PackageAssets/*
        $(Build.ArtifactStagingDirectory)/archives/*
      assetUploadMode: 'delete'
      isDraft: true
      isPreRelease: false
      addChangeLog: false